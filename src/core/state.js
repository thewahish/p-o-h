// filename: src/core/state.js

import { GameConfig } from '../constants/config.js';
import { Characters } from '../constants/characters.js';
import Logger from './logger.js';

Logger.log('state.js: Module loaded.', 'SYSTEM');

export const GameState = {
    _subscribers: new Set(),

    subscribe(callback) {
        this._subscribers.add(callback);
        callback({ ...this.current }); // Immediately notify
        return () => this._subscribers.delete(callback);
    },

    _notify() {
        const freshState = { ...this.current };
        for (const callback of this._subscribers) {
            callback(freshState);
        }
    },

    current: {
        gameStarted: false,
        currentScreen: 'main-menu',
        difficulty: 'normal',
        player: null,
        selectedCharacter: null,
        currentFloor: 1,
        gold: GameConfig.INVENTORY.startingGold,
        experience: 0,
        level: 1,
        inventory: [],
        equipped: {},
        battleInProgress: false,
        enemies: [],
        turnOrder: [],
        currentTurnIndex: 0,
        enemiesDefeated: 0,
        settings: { autoSave: true }
    },

Â  Â  reset() {
Â  Â  Â  Â  this.current = { gameStarted: false, currentScreen: 'main-menu', difficulty: 'normal', player: null, selectedCharacter: null, currentFloor: 1, gold: GameConfig.INVENTORY.startingGold, experience: 0, level: 1, inventory: [], equipped: {}, battleInProgress: false, enemies: [], turnOrder: [], currentTurnIndex: 0, enemiesDefeated: 0, settings: { autoSave: true } };
        Logger.log('Game state has been reset.', 'STATE');
        this._notify();
Â  Â  },

Â  Â  newGame(characterId, difficulty = 'normal') {
Â  Â  Â  Â  this.reset();
Â  Â  Â  Â  this.current.gameStarted = true;
Â  Â  Â  Â  this.current.selectedCharacter = characterId;
Â  Â  Â  Â  this.current.difficulty = difficulty;
Â  Â  Â  Â  const characterData = Characters[characterId.toUpperCase()];
Â  Â  Â  Â  if (!characterData) throw new Error(`Invalid character: ${characterId}`);
Â  Â  Â  Â  this.current.player = this.createPlayerFromCharacter(characterData);
        Logger.log(`New game started with character: ${characterId}`, 'STATE');
        this._notify();
Â  Â  Â  Â  return true;
Â  Â  },

Â  Â  createPlayerFromCharacter(characterData) {
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  id: characterData.id, name: characterData.name, class: characterData.id,
Â  Â  Â  Â  Â  Â  title: characterData.role, sprite: '...', stats: { ...characterData.baseStats },
Â  Â  Â  Â  Â  Â  maxStats: { ...characterData.baseStats },
Â  Â  Â  Â  Â  Â  resource: { name: characterData.resource, current: characterData.baseStats.resource, max: characterData.baseStats.resource },
Â  Â  Â  Â  Â  Â  abilities: [...characterData.abilities], level: 1, experience: 0, statusEffects: []
Â  Â  Â  Â  };
Â  Â  },

Â  Â  updatePlayerStats() {
Â  Â  Â  Â  if (!this.current.player) return;
Â  Â  Â  Â  const characterData = Characters[this.current.selectedCharacter.toUpperCase()];
Â  Â  Â  Â  const baseStats = { ...characterData.baseStats };
Â  Â  Â  Â  const growth = characterData.growthRates;
Â  Â  Â  Â  const levelBonus = this.current.level - 1;
Â  Â  Â  Â  
Â  Â  Â  Â  baseStats.hp = Math.floor(baseStats.hp + (growth.hp * levelBonus));
Â  Â  Â  Â  baseStats.maxHp = baseStats.hp;
Â  Â  Â  Â  baseStats.atk = Math.floor(baseStats.atk + (growth.atk * levelBonus));
Â  Â  Â  Â  baseStats.def = Math.floor(baseStats.def + (growth.def * levelBonus));
Â  Â  Â  Â  baseStats.spd = Math.floor(baseStats.spd + (growth.spd * levelBonus));
Â  Â  Â  Â  baseStats.crit = parseFloat((baseStats.crit + (growth.crit * levelBonus)).toFixed(2));
Â  Â  Â  Â  
Â  Â  Â  Â  Object.values(this.current.equipped).forEach(item => {
Â  Â  Â  Â  Â  Â  if (item && item.stats) {
Â  Â  Â  Â  Â  Â  Â  Â  Object.keys(item.stats).forEach(stat => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (baseStats.hasOwnProperty(stat)) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  baseStats[stat] += item.stats[stat];
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });
Â  Â  Â  Â  
Â  Â  Â  Â  const oldMaxHp = this.current.player.maxStats.hp;
Â  Â  Â  Â  const currentHpPercent = this.current.player.stats.hp / oldMaxHp;
Â  Â  Â  Â  this.current.player.stats = { ...baseStats };
Â  Â  Â  Â  this.current.player.maxStats = { ...baseStats };
Â  Â  Â  Â  this.current.player.stats.hp = Math.round(baseStats.maxHp * currentHpPercent);
        this._notify();
Â  Â  },

Â  Â  addExperience(amount) {
Â  Â  Â  Â  if (!this.current.player) return false;
Â  Â  Â  Â  this.current.experience += amount;
Â  Â  Â  Â  this.current.player.experience += amount;
Â  Â  Â  Â  const requiredXP = this.getRequiredExperience(this.current.level);
Â  Â  Â  Â  if (this.current.experience >= requiredXP && this.current.level < (GameConfig.XP_CURVE?.maxLevel || 60)) {
Â  Â  Â  Â  Â  Â  this.levelUp();
Â  Â  Â  Â  }
Â  Â  Â  Â  this._notify();
Â  Â  Â  Â  return true;
Â  Â  },

Â  Â  getRequiredExperience(level) {
Â  Â  Â  Â  const config = GameConfig.XP_CURVE || { baseXP: 100, increment: 50 };
Â  Â  Â  Â  if (level === 0) return 0;
Â  Â  Â  Â  return config.baseXP + (level - 1) * config.increment;
Â  Â  },

Â  Â  levelUp() {
Â  Â  Â  Â  this.current.level++;
Â  Â  Â  Â  this.current.player.level++;
Â  Â  Â  Â  this.updatePlayerStats();
Â  Â  Â  Â  this.current.player.stats.hp = this.current.player.maxStats.hp;
Â  Â  Â  Â  this.current.player.resource.current = this.current.player.resource.max;
Â  Â  Â  Â  const character = Characters[this.current.selectedCharacter.toUpperCase()];
Â  Â  Â  Â  const growth = character.growthRates;
        
        // --- FIX: Replaced problematic alert() with our new Logger ---
        const levelUpMessage = `ðŸŽ‰ LEVEL UP! You are now Level ${this.current.level}!`;
        Logger.log(levelUpMessage, 'SYSTEM');
        Logger.log(`- Health:+${growth.hp}, Attack:+${growth.atk}, Defense:+${growth.def}`, 'STATE');
        Logger.log(`- Speed:+${growth.spd}, Critical:+${growth.crit}%`, 'STATE');
        Logger.log('Health and resources have been fully restored.', 'SYSTEM');
        
        this._notify();
Â  Â  },

Â  Â  addGold(amount) {
Â  Â  Â  Â  this.current.gold += amount;
        this._notify();
Â  Â  Â  Â  return this.current.gold;
Â  Â  },

Â  Â  spendGold(amount) {
Â  Â  Â  Â  if (this.current.gold >= amount) {
Â  Â  Â  Â  Â  Â  this.current.gold -= amount;
            this._notify();
Â  Â  Â  Â  Â  Â  return true;
Â  Â  Â  Â  }
Â  Â  Â  Â  return false;
Â  Â  },

    spendResource(amount) {
        if (!this.current.player) return false;
        if (this.current.player.resource.current >= amount) {
            this.current.player.resource.current -= amount;
            this._notify();
            return true;
        }
        return false;
    },

    update(key, value) {
        this.current[key] = value;
        this._notify();
    },

    startBattle(enemies) {
        this.current.battleInProgress = true;
        this.current.enemies = enemies;
        this.current.turnOrder = [];
        this.current.currentTurnIndex = 0;
        this._notify();
    },

    endBattle() {
        this.current.battleInProgress = false;
        this.current.enemies = [];
        this.current.turnOrder = [];
        this.current.currentTurnIndex = 0;
        this._notify();
    }
};